---
import PostCard from '@/components/post-card.astro';
import PostLine from '@/components/post-line.astro';
import Chip from '@/components/ui/chip.astro';
import Command from '@/components/ui/command.astro';
import Separator from '@/components/ui/separator.astro';
import Textfield from '@/components/ui/textfield.astro';
import Layout from '@/layouts/layout.astro';
import { getCollection } from 'astro:content';
import { Dot, Search } from 'lucide-astro';
import { GET as getTotalViews } from './api';

const _posts = await getCollection('posts');
const posts = _posts.sort((a, b) => b.data.published.valueOf() - a.data.published.valueOf());
const topics = [...new Set(_posts.flatMap((post) => post.data.topics))].sort();
// @ts-ignore
const totalViews = await getTotalViews(Astro).then((res) => res.text());
---

<Layout title="Blog | Christian Penrod">
  <div class="mx-auto mt-fluid-5 max-w-xl lg:max-w-screen-lg">
    <section>
      <h1 class="text-3xl font-bold tracking-widest">BLOG POSTS</h1>
      <p class="max-w-prose text-xs text-2">Explore various sofware-related posts.</p>
    </section>
    <Separator class="mb-8 mt-4 lg:mb-12" />
    <div class="grid gap-20 lg:grid-cols-[1fr_30%]">
      <section class="flex flex-col gap-6">
        <div class="flex items-center gap-4">
          <h2 class="font-bold leading-none tracking-wider text-2">ALL POSTS</h2>
          <Separator class="flex-1" />
          <div class="flex items-center text-xxs text-2">
            <span>{totalViews} Views</span>
            <Dot class="shrink-0" size={14} aria-hidden />
            <span>{posts.length} Posts</span>
          </div>
        </div>
        <div class="flex flex-col gap-4 rounded border bg-2/30 p-4">
          <Textfield data-post-filter-search placeholder="Search Posts" class="text-xs">
            <Search slot="prefix" size={12} aria-hidden />
            <Command
              slot="suffix"
              key="/"
              @keyup.window.slash="$el.parentElement.previousElementSibling.focus()"
            />
          </Textfield>
          <!-- prettier-ignore -->
          <ul data-post-filter-topics class="flex flex-wrap gap-2">
            {topics.map((value) => <li><Chip aria-label={`${value} Filter`} {value}>{value}</Chip></li>)}
          </ul>
        </div>
        <div>
          <ul data-searched-posts class="flex flex-col"></ul>
          <!-- prettier-ignore -->
          <ul data-static-posts class="flex flex-col">
            {posts.map((post) => <li><PostLine {post} /></li>)}
          </ul>
          <div data-no-posts-found class="mt-6 hidden text-center">
            <h2 class="text-base font-bold tracking-wider">No Posts Found</h2>
            <p class="text-xs text-2">No posts matched the search criteria.</p>
          </div>
        </div>
      </section>
      <section class="hidden flex-col gap-6 lg:flex">
        <h2 class="font-bold leading-none tracking-wider text-2">RECENT POSTS</h2>
        <!-- prettier-ignore -->
        <ul class="flex flex-col gap-6">
          {posts.slice(0, 3).map((post) => <li><PostCard {post} /></li>)}
        </ul>
      </section>
    </div>
  </div>
</Layout>

<script>
  import { executeSearch, prepareSearch } from '@/libs/pagefind';

  document.addEventListener('astro:page-load', () => prepareSearch(), { once: true });
  document.addEventListener('astro:page-load', () => {
    const activeTopics = new Set<string>();
    const searchFilter = document.querySelector('[data-post-filter-search]') as HTMLInputElement;
    const topicsFilter = document.querySelector('[data-post-filter-topics]') as HTMLUListElement;
    const staticPosts = document.querySelector('[data-static-posts]') as HTMLUListElement;
    const searchedPosts = document.querySelector('[data-searched-posts]') as HTMLUListElement;
    const noPostsFound = document.querySelector('[data-no-posts-found]') as HTMLDivElement;
    if (!searchFilter || !topicsFilter || !staticPosts || !searchedPosts || !noPostsFound) return;

    searchFilter.oninput = async () => requestSearch();
    topicsFilter.querySelectorAll('input').forEach((topic) => {
      topic.onchange = async () => {
        topic.checked ? activeTopics.add(topic.value) : activeTopics.delete(topic.value);
        await requestSearch();
      };
    });

    const requestSearch = async () => {
      const payload = await executeSearch(searchFilter.value, Array.from(activeTopics));
      searchedPosts.innerHTML = '';

      if (payload.length) {
        staticPosts.classList.add('hidden');
        searchedPosts.classList.remove('hidden');
        noPostsFound.classList.add('hidden');
      } else {
        searchedPosts.classList.add('hidden');
        if (searchFilter.value.length || activeTopics.size) noPostsFound.classList.remove('hidden');
        else staticPosts.classList.remove('hidden');
      }

      payload.forEach(({ raw_url, meta }) => {
        const post = encodeURIComponent(JSON.stringify({ ...meta, url: raw_url }));
        searchedPosts.innerHTML += `<li><post-line data-post="${post}"/></li>`;
      });
    };
  });
</script>
