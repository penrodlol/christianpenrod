---
import Me from '@/assets/me.webp';
import PostCard from '@/components/post-card.astro';
import PostGithub from '@/components/post-github.astro';
import PostSubheader from '@/components/post-subheader.astro';
import Badge from '@/components/ui/badge.astro';
import * as Code from '@/components/ui/code';
import Date from '@/components/ui/date.astro';
import Link from '@/components/ui/link.astro';
import Note from '@/components/ui/note.astro';
import Separator from '@/components/ui/separator.astro';
import * as TableOfContents from '@/components/ui/table-of-contents';
import Text from '@/components/ui/text.astro';
import Layout from '@/layouts/layout.astro';
import type { GetStaticPaths } from 'astro';
import { Image } from 'astro:assets';
import { getCollection, type CollectionEntry } from 'astro:content';
import { Calendar, Clock4, Eye } from 'lucide-astro';

type Post = CollectionEntry<'posts'>;
type Props = { post: Post; prev: Post; next: Post };

export const getStaticPaths: GetStaticPaths = async () =>
  getCollection('posts').then((posts) =>
    posts
      .sort((a, b) => b.data.published.valueOf() - a.data.published.valueOf())
      .map((post, index, _posts) => {
        const prev = _posts[index + 1] ?? _posts[0];
        const next = _posts[index - 1] ?? _posts[_posts.length - 1];
        return { params: { slug: post.slug }, props: { post, prev, next } };
      }),
  );

const { post, prev, next } = Astro.props;
const { remarkPluginFrontmatter, headings, Content } = await post.render();
---

<Layout
  title={post.data.title}
  description={post.data.description}
  og={`open-graph/src/content/posts/${post.slug}.png`}
  class="mx-auto max-w-2xl xl:grid xl:max-w-screen-xl xl:grid-cols-[1fr,18rem] xl:gap-16 xl:px-16"
>
  <article>
    <Text as="h1" class="uppercase text-3xl">{post.data.title}</Text>
    <div class="mt-4 flex flex-wrap items-center gap-4">
      <Badge><Calendar aria-hidden /><Date value={post.data.published} /></Badge>
      <Badge><Clock4 aria-hidden />{remarkPluginFrontmatter.readingTime}</Badge>
      <Badge
        x-data={`{ views: $fetch("/blog/views", ${JSON.stringify({ method: 'PUT', body: { slug: post.slug } })})}`}
      >
        <Eye aria-hidden />
        <Text x-text="(await views)?.toString().padStart(6, '0')">000000</Text>
      </Badge>
    </div>
    <Separator class="my-8" />
    <div class="flex max-w-[70ch] flex-col gap-8 leading-7 [&>p]:text-1/85 [&_p_a]:underline">
      <Content
        components={{
          h2: PostSubheader,
          a: Link,
          blockquote: Note,
          figure: Code.Root,
          figcaption: Code.Header,
          pre: Code.Content,
          code: Code.Block,
        }}
      />
      {post.data.repo && <PostGithub repo={post.data.repo} />}
    </div>
    <Separator class="mb-8 mt-16" />
    <div class="flex flex-col gap-6">
      <Text as="h3">MORE POSTS</Text>
      <ul class="grid gap-x-10 gap-y-6 md:grid-cols-2">
        <PostCard post={prev} />
        <PostCard post={next} />
      </ul>
    </div>
  </article>
  <aside class="sticky top-20 hidden h-max rounded border p-4 shadow xl:block">
    <TableOfContents.Root aria-labelledby="table-of-contents">
      <TableOfContents.Title id="table-of-contents">TABLE OF CONTENTS</TableOfContents.Title>
      <TableOfContents.Links>
        <TableOfContents.Link {...{ slug: 'heading', text: 'Introduction' }} />
        {headings.map((heading) => <TableOfContents.Link {...heading} />)}
      </TableOfContents.Links>
    </TableOfContents.Root>
    <Separator class="my-4" />
    <div class="flex gap-4">
      <div class="size-14 shrink-0 rounded border bg-2"><Image src={Me} alt="Me" loading="eager" /></div>
      <div class="flex flex-col text-xs">
        <Text class="font-medium">CHRISTIAN PENROD</Text>
        <Text class="text-2">Front-End Web Developer</Text>
      </div>
    </div>
  </aside>
</Layout>
